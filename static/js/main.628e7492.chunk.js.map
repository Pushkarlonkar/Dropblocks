{"version":3,"sources":["serviceWorker.js","index.js","App.js","components/Navbar/Navbar.js","components/Images/cloud.png","components/Form/Form.js","components/Navbar/Head.js","components/Files/File.js","components/Form/helper.js","components/Files/FileList.js"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ipfs","require","create","useEffect","loadWeb3","loadBlockchaindata","useState","curaccount","setcurAccount","loader","setLoader","DStorage","setDStorage","setfileCount","files","setFiles","type","setType","name","setName","f","setF","a","ethereum","web3","Web3","enable","currentProvider","alert","eth","getAccounts","accounts","net","getId","networkId","networkData","DStorageJson","networks","DS","Contract","abi","address","methods","fileCount","call","FileCount","i","uploadFile","description","buffer","reader","FileReader","readAsArrayBuffer","onloadend","Buffer","result","add","path","size","send","from","on","hash","reload","console","log","className","captureFile","e","preventDefault","file","target","Navbar","src","cl","alt","href","module","exports","Form","fileDescription","setFileDescription","onChange","value","placeholder","id","onClick","Head","File","fileId","fileName","fileType","bytes","parseInt","Math","floor","round","pow","convertBytes","fileSize","moment","unix","uploadTime","format","uploader","rel","substring","fileHash","FileList","length","map","key"],"mappings":"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","file":"static/js/main.628e7492.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {useEffect, useState} from \"react\";\nimport DStorageJson from \"./contracts/DStorage.json\";\nimport Web3 from \"web3\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport Form from \"./components/Form/Form\";\nimport Head from \"./components/Navbar/Head\";\nimport FileList from \"./components/Files/FileList\";\nimport './App.scss'\n\n\n\nconst ipfsClient = require('ipfs-http-client');\nconst ipfs = ipfsClient.create('https://ipfs.infura.io:5001/api/v0');\n\n//console.log(ipfsClient.create);\n\nfunction App (){\n  useEffect(() => {\n    loadWeb3(); \n    loadBlockchaindata();\n  }, [])\n\n  //console.log(create);\n  \n  // we need 2 var \n  // 1 for storing the current account number \n  // 2 for storing the loader \n  // the loader is necessary because we need to check if the page is loaded or not \n  const [curaccount,setcurAccount] = useState(\"\");\n  const [loader,setLoader] = useState(true);\n  const [DStorage,setDStorage ] = useState();\n  const [fileCount,setfileCount] = useState();\n  const [files,setFiles] = useState([]);\n  const [type,setType] = useState();\n  const [name,setName] = useState();\n  const [f,setF] = useState();\n  \n  \n  const loadWeb3 = async () => {\n    // connects our app to the blockchain\n    // boiler plate code\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum);\n      await window.ethereum.enable();\n    } else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider);\n    } else {\n      window.alert(\n        \"Non-Ethereum browser detected . You should consider trying metamask!\"\n      );\n    }\n  };\n  const loadBlockchaindata = async () =>{\n    setLoader(true);\n    const web3 = window.web3;\n    //console.log(web3);\n\n    // here the main logic happens \n    // get the accounts await is important\n    const accounts = await web3.eth.getAccounts();\n    //console.log(accounts); \n    setcurAccount(accounts[0]);\n    // NETWORK ID\n    const networkId = await web3.eth.net.getId();\n    const networkData = DStorageJson.networks[networkId];\n    //console.log(networkData);\n    if(networkData){\n      // we get the contract from from web3 by passing it the parameters \n      // ContractName.abi and networkData.address\n      const DS = new web3.eth.Contract(DStorageJson.abi,networkData.address);\n      setDStorage(DS);\n      //console.log(DS);\n      const FileCount = await DS.methods.fileCount().call()\n      //console.log(FileCount);\n      \n      setfileCount(FileCount);\n      \n      //console.log(FileCount);\n      for(var i = FileCount;i>=1;i--){\n        const f = await DS.methods.files(i).call();\n        // console.log(f);\n        // console.log(files);\n        setFiles(files =>[...files,f]);\n      }\n      //SF(FileCount);\n      setLoader(false);\n    }else{\n      window.alert(\"DStorage Contract Not Deployed to detected Network\")\n    }\n    setLoader(false);\n  }\n\n\n\n\n  const captureFile = (e) => {\n\n    //console.log(\"Inside Capture File\");\n    e.preventDefault();\n    const file = e.target.files[0];\n    //console.log(file);\n    const reader = new window.FileReader();\n    reader.readAsArrayBuffer(file);\n    //console.log(reader);\n\n    reader.onloadend = () =>{\n      // const B = await Buffer(reader.result);\n      //console.log(\"Inside onloadend\");\n      //console.log(Buffer(reader.result));\n      // setBf(\n      //   {\n      //     buffer : Buffer(reader.result)[0]\n      //   }\n      // );\n      setF(file);\n\n\n\n      if(file.name!=null && file.type!=null){\n        setType( file.type);\n        setName( file.name);\n      }\n\n      \n    }\n    // *! Buffer here is undefined so what to do wait for\n  }\n\n\n\n\n\n\n  const uploadFile = async (description)=>{\n    // Step 2\n    // adding the processed file to ipfs\n    //setterFor();\n    //console.log(description);\n    setLoader(true);\n    //console.log(\"inside the uploadfile\")\n    \n    var buffer = [];\n    const reader = new window.FileReader();\n    //console.log(f);\n    reader.readAsArrayBuffer(f);\n    reader.onloadend=async()=>{\n      buffer = await Buffer(reader.result);\n      //console.log(\"uploading file to ipfs\");\n      //console.log(buffer);\n      try{\n        const result = await ipfs.add(buffer);\n\n        DStorage.methods.uploadFile(result.path,result.size,type,name,description).send({from : curaccount}).on('transactionHash',(hash)=>{\n          setLoader(false); \n          setType(null);\n          setName(null);\n        })\n        window.location.reload();\n        \n      }catch(error){\n        window.alert(\"ERROR\");\n        console.log(error);\n      }\n      \n    }\n    //if(buffer.length!=0){\n      //window.location.reload();\n    //}\n    setLoader(false);\n  }\n\n  if(loader){\n    return(\n      <div className=\"progress\">\n        <div className=\"indeterminate\"></div>\n      </div>\n      )\n  } \n  return (\n    <div> \n      <Navbar curaccount = {curaccount}/>\n      <div className = \"container\">\n        <div className=\"divider\"></div>\n            <div className=\"section\">\n                  <Head/>\n            </div>\n\n            <div className=\"section\">\n                  <Form captureFile = {captureFile} uploadFile= {uploadFile}/>\n            </div>\n\n            <div className=\"divider\"></div>\n\n            <div className=\"section\">\n                  <FileList files = {files}/>\n            </div>\n        </div>\n      </div>\n\n  )\n\n}\n\nexport default App\n","import React from 'react'\r\nimport cl from '../Images/cloud.png';\r\nimport './Navbar.css'\r\nconst Navbar = ({curaccount}) => {\r\n    return (\r\n        <div>\r\n            <nav>\r\n                <div className=\"nav-wrapper white\">\r\n                    <img src={cl} alt=\"\" className = \"cloud\"/>\r\n                    <a href=\"\" className=\"brand-logo black-text\">\r\n                        DROPBLOCKS\r\n                    </a>\r\n                    <li className = \"right black-text hide-on-med-and-down\">\r\n                        {curaccount}\r\n                    </li>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navbar\r\n","module.exports = __webpack_public_path__ + \"static/media/cloud.6e8a0c90.png\";","import React,{useState} from 'react'\r\nimport './Form.css'\r\nconst Form = ({captureFile,uploadFile}) => {\r\n    // we need to create a box in center to upload a file \r\n  const [fileDescription,setFileDescription] = useState();\r\n  \r\n  const handleSubmit = (e)=>{\r\n    e.preventDefault();\r\n    //console.log(fileDescription);\r\n    // console.log(\"inside handle\");\r\n    const description =fileDescription;\r\n    uploadFile(description);\r\n  }\r\n    return (\r\n        <div>\r\n            \r\n                <div className=\"row\">\r\n                    <div className=\"col l2 s12 \">\r\n                    </div>\r\n                    <div className=\"col l8 s12 center white inp\">\r\n                    <div className=\"section\">\r\n                        <div className=\"row\">\r\n                            \r\n                            <div className=\"col ll s12\">\r\n\r\n                            </div>\r\n                            <div className=\"col l8 s12\">\r\n                                <div className = \"file-field input-field \">\r\n                                        <input  onChange = {\r\n                                            (e)=>{\r\n                                                setFileDescription(e.target.value);\r\n                                            }\r\n                                        }placeholder= \"Description\" \r\n                                            type=\"text\" \r\n                                            id = \"filename\" \r\n                                            className = \"c\"\r\n                                        />\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"col cntr-btn s12 l8\">\r\n                                <div className = \"file-field input-field\">\r\n                                    <div className = \"btn-large waves-effect waves-light yellow darken-1\">\r\n                                        <span>Choose File</span>\r\n                                        <input type = \"file\" onChange = {captureFile}/>\r\n                                    </div>\r\n                                    \r\n                                    <div className = \"file-path-wrapper \">\r\n                                        <input className = \"file-path validate\" type = \"text\"\r\n                                            placeholder = \"Upload file\" />\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                            \r\n                            <div className=\"col s12 l4 \">\r\n                                <button  onClick = {handleSubmit} href=\"\" className=\"btn-large upload \">UPLOAD</button>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                    </div> \r\n                </div> \r\n            \r\n            \r\n        </div>\r\n                \r\n                \r\n\r\n       \r\n    )\r\n}\r\n\r\nexport default Form\r\n","import React from 'react'\r\n\r\nconst Head = () => {\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                    <div className=\"col s12 m2 l2\">\r\n\r\n                    </div>\r\n                    <div className=\"col s12 m8 l8\">\r\n                        <h3 className = \"center\">DECENTRALIZED WAY TO STORE AND TRANSFER YOUR FILES</h3>\r\n                    </div>\r\n                    <div className=\"col s12 m3 l3\">\r\n\r\n                    </div>\r\n                </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Head\r\n","import React from 'react'\r\nimport { convertBytes } from '../Form/helper';\r\nimport moment from 'moment'\r\n\r\nconst File = ({file}) => {\r\n        //{file.fileHash.substring(0,10)}...\r\n        // console.log(file);\r\n        return (\r\n            <tr>\r\n                <td>{file.fileId}</td>\r\n                <td>{file.fileName}</td>\r\n                <td>{file.fileDescription}</td>\r\n                <td>{file.fileType}</td>\r\n                <td>{convertBytes(file.fileSize)}</td>\r\n                <td>{moment.unix(file.uploadTime).format('h:mm:ss A M/D/Y')}</td>\r\n                <td>\r\n                    <a href={\"https://etherscan.io/address/\" + file.uploader}\r\n                    rel=\"noopener noreferrer\"\r\n                    target=\"_blank\">{file.uploader.substring(0,10)}...</a>\r\n                </td>\r\n                <td><a href={\"https://ipfs.infura.io/ipfs/\" + file.fileHash}\r\n                        rel=\"noopener noreferrer\"\r\n                        target=\"_blank\">Download\r\n                    </a>\r\n                </td>\r\n            </tr>\r\n        )\r\n    \r\n}\r\n\r\nexport default File\r\n","export function convertBytes(bytes) {\r\n    var sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB'];\r\n    if (bytes === 0) return '0 Byte';\r\n    var i = parseInt(Math.floor(Math.log(bytes) / Math.log(1024)));\r\n    return Math.round(bytes / Math.pow(1024, i), 2) + ' ' + sizes[i];\r\n }","import React from 'react'\r\nimport File from './File.js'\r\nconst FileList = ({files}) => {\r\n    // console.log(files.length);\r\n    // console.log(files);\r\n\r\n    if(files.length>1){\r\n        return (\r\n            <div>\r\n            <h5 className=\"center  \"></h5>\r\n            <table className = \"responsive-table highlight centered striped\">\r\n                <thead>\r\n                <tr>\r\n                    <th>ID</th>\r\n                    <th>NAME</th>\r\n                    <th>DESCRIPTION</th>\r\n                    <th>TYPE</th>\r\n                    <th>SIZE</th>\r\n                    <th>DATE</th>\r\n                    <th>UPLOADER/VIEW</th>\r\n                    <th>HASH/VIEW/GET</th>\r\n                </tr>\r\n                </thead>\r\n                <tbody>\r\n                {files.map((file,key)=>{\r\n                    //console.log(file);\r\n                    if(file!=null){\r\n                        return(\r\n                            <File file = {file} key = {key}/>\r\n                            )\r\n                        }\r\n                        return(\r\n                            <div>\r\n\r\n                            </div>\r\n                        )\r\n                    }\r\n                    )\r\n                }\r\n              </tbody>\r\n            </table>\r\n        </div>\r\n        )\r\n    }else{\r\n        return(\r\n            <div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default FileList\r\n"],"sourceRoot":""}